#!/bin/bash

# Script to trancode full bandwidth dumps that includes whatever and
# produce a lower bandwidth version with just one audio track and one
# set of subtitles - burned into the picture.  The result should be
# suitable for bringing on travel and playing via WiFi on your TV (if
# it supports the codec).
#
# Result will be:
# - mkv container
# - H.264 encoded video, quality setting 20 (two pass)
# - MP3 encoded stereo audio, 256kbit/s

# This script requires
# - mediainfo - to see what's in the files
# - HandBreakCLI - to compress it the right way
# - dialog - to ask the user stuff
# - batch (from the "at" package) to batch process movie compression

get_language () {
    # $1   = "line" number
    # "$2" = lines (tag\ntext\ntag\ntext...)

    case $2 in
	'') echo none # Empty list -
	    return;;
    esac

    # Look up the specified tag from the list and return the
    # corresponding text.  Tag is assumed to be numerical.

    # NOTE we look at the tag we don't actually count the numbers
    # 
    # The sed does this:
    # For all lines matching the contents of $1:
    # - Copy the next line into the linebuffer
    # - Remove the embedded newline
    # - Remove leading number and whitespace
    # + Now the content will be "LANGUAGE_TRAILING_STUFF_SDH".  Want to keep the language and the SDH
    # - Remove anything between _ and SDH
    # - Remove anything after the first (remaining) _
    # - Print the content of the linebuffer
    # For all lines: delete eveything
    # SO: Only the line following the matching line is printed.
    line="$( echo "$2" | sed '/^'$1'$/{N;s/\n/ /;s/^[0-9]* //;s/_.*SDH/SDH/;s/_.*//;p}; d' )"
    echo $line
}


select_language () {
    # $1: Dialog question/instuction
    # $2: Multi-word string consisting of "tag" and "text" pairs as described
    #     in the dialog docs. The "text" part can only be one word since
    #     we're a shell script and are not using arrays.

    case $2 in
	'') return 1;;  # Empty list
    esac

    LINES=$( echo "$2" | wc -l )

    case $LINES in
        0)  # None
            return 1;;

	1)  echo "Odd number of languages: $2" >&2
	    exit 1;;

	2)  # Just one.  Find its number.  It should be 1, but I feel paranoid
	    ID=$( echo "$2" | head -1 );;

        *)  # Several, let the user choose
	    clear

	    ID=$( dialog --clear --title "$movie" --menu "$1" 0 0 0 $2 2>&1 >/dev/tty )
	    STATUS=$?
	    case $STATUS in
		255) echo "Dialog error ($1): $ID" >&2
		     exit 255;;
	    esac

	    case $ID in
		'') clear
		    echo "Canceled" >&2
		    exit 255;;
	    esac
	    ;;
    esac

    return $ID
}


get_audio () {
    # Select audio language
    # A audio track does not necessarily have a language code assigned
    #
    # - First sed isolates and normalizes the audio descriptions
    # - Awk picks out the interesting information and constructs dialog --menu input
    # - The awk script risks producing strings like
    #   "English_English_Forced_Forced".  This is reduced by the second
    #   sed expression
    #
    AUDIO=$( mediainfo "$movie" |
              sed '/^\(Audio$\|Audio #\)/,/^$/!d;
	           s/^Audio$/Audio 1/;
		   s/^Audio #/Audio /' |
	      awk '/^Audio /       { N=$2; L="Unknown"; D = T = F = ""; }
	           /^Language/     { L=$3; }
		   /^Default.*Yes/ { D="_Default"; }
		   /^Forced.*Yes/  { F="_Forced"; }
		   /Title/         { sub(/.*: /, ""); gsub(/ /,"_"); T="_" $0; }
		   /^$/            { print N"\n"L D F T; }' |
	      sed 's/\(_\|^\)\([^_]*\)_\2/\1\2/g' )

    case $AUDIO in
	'') echo No audio available.  No support for silent movies >&2;
	    exit 1;;
    esac

    # User selects what languages to use
    select_language "Select audio language" "$AUDIO"
    WAID=$?

    # And what language does those numbers correspond to?
    WAUDIO=$(get_language $WAID "$AUDIO")

    AUDIO="--audio $WAID"
}


get_subtitle () {
    # Select subtitle

    # Extract list of subtitle languages
    SUBS="0
None
$( mediainfo "$movie" |
   sed '/^\(Text$\|Text #\)/,/^$/!d;
        s/^Text$/Text 1/;
        s/^Text #/Text /;' |
   gawk '/^Text /        { text = $2; lang="Unknown" }
         /^Forced.*Yes/  { forced = "_Forced"; }
         /^Default.*Yes/ { def = "_Default"; }
         /^Title/        { sub(/.*: /, ""); gsub(/ /,"_"); title ="_" $0; }
	 /^Language/     { lang = $3; }
         /^$/            { print text "\n" lang title forced def;
	                   def = forced = title = ""; lang = "Unknown"; }' |
    sed 's/\(_\|^\)\([^_]*\)_\2/\1\2/g; s/[^A-Za-z0-9_]//g' )"

    lines=$(echo "$SUBS" | grep -v '^$' | wc -l)

    select_language "Select subtitle language" "$SUBS"
    WSID=$?

    case $WSID in
	0) WSUB=none;;
	*) WSUB=$(get_language $WSID "$SUBS");;
    esac

    case $WSUB in
	none) SUBTITLE='';;
	*)    SUBTITLE="--subtitle $WSID --subtitle-burn 1"
    esac
}


get_optimization () {
    # List of optimizations
OPT="1
film
2
animation
"

    select_language "Select optimization" "$OPT"
    OPTID=$?
}


get_scaling () {
    WIDTH="$( mediainfo "$movie" |
              sed '/^\(Video$\|Video #\)/,/^$/!d;
                   s/^Video$/Video #1/;
                   /^Width/!d;
                   s/^.*[:#][ ]*//; s/ //g;
                   s/pixels$//;' )"

    LOWER="1
No"

    # Check is width/rows of video stream, but the names of
    # resulutions is lines in the videostream.
    # 
    # Testing the width has seemed more reliable than the height,
    # probably due to the variations in cinematic widescreen formats.
    # Various sources have had odd widths too, but it seemed easier
    # after a sampling of source materials.
    if [ $WIDTH -le 730 ] ; then
	# SD, no downscaling
	return
    elif [ $WIDTH -ge 960 -a $WIDTH -le 1280 ] ; then
	# 1280x720 Broadcast HD - 960x720 = 4:3 in 720p
	RES="720 HD"
	LOWER="$LOWER
2
Standard"
    elif [ $WIDTH -ge 1440 -a $WIDTH -le 1920 ] ; then
	# 1920x1080 Full HD 1440x1080 = 4:3 in 1080p
	RES="1920 full HD"
        LOWER="$LOWER
2
720p
3
Standard"
    elif [ $WIDTH -eq 3840 ] ; then
	# 3840 x 2160p = 4K UHD
	RES="3840 4K UHD"
	LOWER="$LOWER
2
1080p
3
720p
4
Standard"
    else
	echo "Unrecognized vertical resolution $WIDTH"
        exit 1
    fi

    select_language "Video is $RES. Do you want to downscale?" "$LOWER";
    ANSWER=$?

    NEWRES=$(get_language $ANSWER "$LOWER")

    SCALING=""
    SCNAME=""

    case $ANSWER:$NEWRES in
	1:*)  : ;; # No scaling
	*:Standard)
	    SCALING="--maxWidth=720 --loose-anamorphic --keep-display-aspect"
	    SCNAME="-sd"
	    ;;
	*:720p)
	    SCALING="--maxHeight=720 --loose-anamorphic --keep-display-aspect"
	    SCNAME="-hd720"
	    ;;
	*:1080p)
	    SCALING="--maxHeight=1080 --loose-anamorphic --keep-display-aspect"
	    SCNAME="-hd1080"
	    ;;
	*)  echo What?
	    exit 1;;
    esac
}


get_fps () {
    FPS="$( mediainfo "$movie" |
              sed '/^\(Video$\|Video #\)/,/^$/!d;
		   /Frame rate mode/d;
		   /Frame rate/!d;
		   s/^.*: //;
		   s/ .*//;')"

    # Just keep the standard FPSes.
    case $FPS in
	24|24.000) return;;     # Movies
	23.97*) return;; # Movies
	25|25.000) return;;     # PAL
	29.97*) return;;  # NTSC
	30|30.000) return;;     # NTSC
	50|50.000) suggest=25;; # HD PAL broadcast
	60|60.000) suggest=30;; # Gaming, online video, some new movies
	*)  suggest=25;; # Whatever you say
    esac

    LOWER="1
Keep
2
$suggest
3
23.976
4
24
5
25
6
29.97
7
30
8
50
9
59.94
10
60
"
    
    select_language "Video is $FPS FPS. Select new FPS" "$LOWER";
    ANSWER=$?

    NEWFPS=$(get_language $ANSWER "$LOWER")

    REFRAME=''

    case $ANSWER:$NEWFPS in
	1:*) return;; # Keep
	*:*) REFRAME="--rate=$NEWFPS"
	     SCNAME="$SCNAME-${NEWFPS}fps";;
    esac
}


issue_command () {
    OPTN=$(get_language $OPTID "$OPT")

    BN="$(basename "$movie")"
    OUT="${BN%.*}-$WAUDIO-$WSUB$SCNAME.mkv"
    LOG="${BN%.*}-$WAUDIO-$WSUB$SCNAME.log"

    # Use $() and cat here to help keep the quoting sane
    CMD="$(cat <<EOF
echo "Generating $OUT from $BN"
echo "Log in $LOG"
echo
nice -9 \
    HandBrakeCLI --decomb -v 0 -i $(printf "%q" "$movie") -o $(printf "%q" "$OUT") --markers \
	$SCALING $REFRAME --two-pass --turbo \
	-e x264 --x264-tune $OPTN --quality 20 \
	$AUDIO --aencoder lame --ab 256 \
	$SUBTITLE >/dev/null 2> $(printf "%q" "$LOG") || echo "Encode exited with error $?"
EOF
)"

    # To check result after a change: --chapters 1

    # --quality 18 was arrived at by looking at different results
    # --quality 20 is HandBrake GUI default quality setting
    # Lame implies mixdown to stereo
    # Used to have --ab 192

    case $DEBUG:$BATCH in
	1:*) echo "$CMD";;
	0:0) eval "$CMD";;
	0:1) echo "$CMD" | batch
             echo Job is queued. Monitor with "at -l" and check mail
	     ;;
    esac
}

BATCH=${SBBATCH:=1}
DEBUG=${SBDEBUG:=0}

case $DEBUG in
    1) set -x
esac

movie="$1"

if [ ! -f "$movie" ] ; then
    echo There does not seem to be any files by that name >&2
    exit 1
fi

get_scaling
get_fps
get_audio
get_subtitle

get_optimization

clear

issue_command
